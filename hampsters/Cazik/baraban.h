#ifndef BARABAN_H
#define BARABAN_H

/*!
 * \file baraban.h
 * \brief Заголовочный файл класса Baraban.
 *
 * Этот файл содержит объявление класса Baraban, который реализует окно игрового автомата,
 * включающее функционал слотов, управление ставками и работу с балансом робуксов.
 */

#include <QDialog>
#include <QPixmap>

namespace Ui {
    /*!
     * \brief Класс пользовательского интерфейса для окна Baraban.
     */
    class Baraban;
}

/*!
 * \brief Класс Baraban.
 *
 * Класс Baraban реализует окно игрового автомата, позволяющее пользователю
 * устанавливать ставки, запускать игровой процесс (слоты) и управлять своим балансом.
 * Также предоставляет возможность возвращения в главное меню.
 */
class Baraban : public QDialog
{
    Q_OBJECT

public:
    /*!
     * \brief Конструктор класса Baraban.
     *
     * Инициализирует окно игрового автомата, устанавливает начальное состояние элементов
     * управления, загружает изображения и получает стартовый баланс робуксов.
     *
     * \param parent Родительский виджет (по умолчанию \c nullptr).
     */
    explicit Baraban(QWidget *parent = nullptr);

    /*!
     * \brief Деструктор класса Baraban.
     *
     * Освобождает ресурсы, связанные с пользовательским интерфейсом.
     */
    ~Baraban();

    /*!
     * \brief Отображает окно игры.
     *
     * Слот для показа окна Baraban.
     */
    void slot_show();

    /*!
     * \brief Устанавливает изображение для первого слота.
     *
     * Принимает число, определяющее, какое изображение установить.
     *
     * \param num Число, определяющее изображение (например, 1, 2 или 3).
     */
    void set_item1(int);

    /*!
     * \brief Устанавливает изображение для второго слота.
     *
     * Принимает число, определяющее, какое изображение установить.
     *
     * \param num Число, определяющее изображение (например, 1, 2 или 3).
     */
    void set_item2(int);

    /*!
     * \brief Устанавливает изображение для третьего слота.
     *
     * Принимает число, определяющее, какое изображение установить.
     *
     * \param num Число, определяющее изображение (например, 1, 2 или 3).
     */
    void set_item3(int);

private slots:
    /*!
     * \brief Обрабатывает нажатие кнопки "Play".
     *
     * Запускает игровой процесс, проверяет, что выбрана ставка и что на балансе достаточно робуксов,
     * затем инициирует крутку слотов.
     */
    void on_pushButtonPlay_clicked();

    /*!
     * \brief Обрабатывает нажатие кнопки для ставки в 1000 робуксов.
     *
     * Устанавливает размер ставки равным 1000 и обновляет соответствующую метку.
     */
    void on_pushButton1000_clicked();

    /*!
     * \brief Обрабатывает нажатие кнопки для ставки в 500 робуксов.
     *
     * Устанавливает размер ставки равным 500 и обновляет соответствующую метку.
     */
    void on_pushButton500_clicked();

    /*!
     * \brief Обрабатывает нажатие кнопки для ставки в 100 робуксов.
     *
     * Устанавливает размер ставки равным 100 и обновляет соответствующую метку.
     */
    void on_pushButton100_clicked();

    /*!
     * \brief Обрабатывает нажатие кнопки "Back".
     *
     * Генерирует сигнал возврата в главное меню с передачей текущего баланса робуксов.
     */
    void on_BackButton_clicked();

private:
    Ui::Baraban *ui;   //!< Указатель на пользовательский интерфейс окна Baraban.

    /*!
     * \brief Изображение для первого слота.
     *
     * QPixmap, используемый для отображения изображения первого слота.
     */
    QPixmap Item1;

    /*!
     * \brief Изображение для второго слота.
     *
     * QPixmap, используемый для отображения изображения второго слота.
     */
    QPixmap Item2;

    /*!
     * \brief Изображение для третьего слота.
     *
     * QPixmap, используемый для отображения изображения третьего слота.
     */
    QPixmap Item3;

    /*!
     * \brief Размер ставки.
     *
     * Текущий размер ставки (например, 100, 500 или 1000).
     */
    int size_of_stavka;

    /*!
     * \brief Баланс робуксов.
     *
     * Текущее количество робуксов, доступное пользователю.
     */
    int robux;

    /*!
     * \brief Запускает игровой процесс (крутку слотов).
     *
     * Функция осуществляет крутку слотов, обновляет изображения и корректирует баланс робуксов
     * в зависимости от результата.
     *
     * \param size Размер ставки, используемой для вычисления выигрыша или проигрыша.
     */
    void run_slots(int);

    /*!
     * \brief Получает начальное количество робуксов.
     *
     * Функция инициализирует баланс робуксов (в будущем будет заменена на получение данных из базы).
     */
    void get_robux();

signals:
    /*!
     * \brief Сигнал для возврата в главное меню.
     *
     * Генерируется при нажатии кнопки "Back" с передачей текущего баланса робуксов.
     *
     * \param QString Строка, содержащая количество робуксов.
     */
    void to_main(QString);
};

#endif // BARABAN_H
