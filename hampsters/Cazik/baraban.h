/**
 * @file baraban.h
 * @brief Заголовочный файл игры в слот-машину (барабаны)
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит объявление класса Baraban, который реализует
 * классическую игру в слот-машину с тремя барабанами.
 */

#ifndef BARABAN_H
#define BARABAN_H

#include <QDialog>

namespace Ui {
class Baraban;
}

/**
 * @brief Игра в слот-машину с тремя барабанами
 * 
 * Класс Baraban реализует классическую игру в слоты с следующими особенностями:
 * - Три барабана с различными символами
 * - Возможность выбора размера ставки (100, 500, 1000 robux)
 * - Анимация вращения барабанов
 * - Автоматический подсчет выигрышей
 * - Различные комбинации для выигрыша
 * 
 * Правила игры:
 * - Три одинаковых символа = большой выигрыш
 * - Два одинаковых символа = малый выигрыш
 * - Размер выигрыша зависит от ставки
 */
class Baraban : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief Конструктор игры в слоты
     * @param parent Родительский виджет (по умолчанию nullptr)
     * 
     * Инициализирует интерфейс игры и начальные значения барабанов.
     */
    explicit Baraban(QWidget *parent = nullptr);
    
    /**
     * @brief Деструктор игры в слоты
     * 
     * Освобождает ресурсы, используемые игрой.
     */
    ~Baraban();

    /**
     * @brief Слот для отображения окна игры
     * 
     * Показывает окно слот-машины и обновляет информацию
     * о балансе игрока.
     */
    void slot_show();

    /**
     * @brief Установка изображения первого барабана
     * @param item_id Идентификатор изображения (1-3)
     * 
     * Устанавливает изображение на первом барабане в соответствии
     * с переданным идентификатором символа.
     */
    void set_item1(int item_id);
    
    /**
     * @brief Установка изображения второго барабана
     * @param item_id Идентификатор изображения (1-3)
     * 
     * Устанавливает изображение на втором барабане в соответствии
     * с переданным идентификатором символа.
     */
    void set_item2(int item_id);
    
    /**
     * @brief Установка изображения третьего барабана
     * @param item_id Идентификатор изображения (1-3)
     * 
     * Устанавливает изображение на третьем барабане в соответствии
     * с переданным идентификатором символа.
     */
    void set_item3(int item_id);

private slots:
    /**
     * @brief Обработчик кнопки запуска игры
     * 
     * Запускает процесс вращения барабанов, проверяет баланс,
     * вычисляет результат и начисляет выигрыш при наличии.
     */
    void on_pushButtonPlay_clicked();

    /**
     * @brief Обработчик кнопки ставки 1000 robux
     * 
     * Устанавливает размер ставки на максимальную сумму.
     * Кнопка доступна только при достаточном балансе.
     */
    void on_pushButton1000_clicked();

    /**
     * @brief Обработчик кнопки ставки 500 robux
     * 
     * Устанавливает размер ставки на среднюю сумму.
     */
    void on_pushButton500_clicked();

    /**
     * @brief Обработчик кнопки ставки 100 robux
     * 
     * Устанавливает размер ставки на минимальную сумму.
     * Базовая ставка, доступная всегда.
     */
    void on_pushButton100_clicked();

    /**
     * @brief Обработчик кнопки возврата в главное меню
     * 
     * Закрывает окно слот-машины и возвращает игрока
     * в главное меню казино.
     */
    void on_BackButton_clicked();

private:
    /** @brief Указатель на UI объект игры */
    Ui::Baraban *ui;

    /** @brief Изображение символа на первом барабане */
    QPixmap Item1;
    
    /** @brief Изображение символа на втором барабане */
    QPixmap Item2;
    
    /** @brief Изображение символа на третьем барабане */
    QPixmap Item3;

    /** @brief Размер текущей ставки (100, 500 или 1000 robux) */
    int size_of_stavka;

    /**
     * @brief Запуск анимации вращения барабанов
     * @param result_combination Результирующая комбинация барабанов
     * 
     * Выполняет анимацию вращения всех трех барабанов и
     * устанавливает финальную комбинацию символов.
     */
    void run_slots(int result_combination);

signals:
    /**
     * @brief Сигнал возврата в главное меню
     * @param player_login Логин игрока для сохранения прогресса
     * 
     * Испускается при нажатии кнопки возврата для
     * перехода обратно в главное меню.
     */
    void to_main(QString player_login);
};

#endif // BARABAN_H
