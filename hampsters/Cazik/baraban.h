/**
 * @file baraban.h
 * @brief Игра "Слоты" (Барабан) - игровые автоматы казино
 * @author Development Team
 * @date 2025
 * @version 1.0
 * 
 * Этот файл содержит объявление класса Baraban, который реализует
 * классическую игру в игровые автоматы (слоты). Игра включает в себя
 * три барабана с различными символами, систему ставок и расчет выигрышей
 * на основе комбинаций выпавших символов.
 */

#ifndef BARABAN_H
#define BARABAN_H

#include <QDialog>
#include "clientapi.h"

namespace Ui {
class Baraban;
}

/**
 * @brief Игра "Слоты" - классические игровые автоматы
 * 
 * Класс Baraban реализует популярную казино-игру "Слоты" с тремя барабанами.
 * Игровая механика включает:
 * - Три независимых барабана с различными символами
 * - Систему ставок (100, 500, 1000 робуксов)
 * - Расчет выигрышей на основе комбинаций символов
 * - Анимацию вращения барабанов
 * - Интеграцию с балансом пользователя через сервер
 * 
 * Правила игры:
 * - Игрок выбирает размер ставки
 * - При нажатии "Играть" все три барабана случайно останавливаются
 * - Выигрыш определяется по количеству одинаковых символов в ряд
 * - Джекпот - три одинаковых символа (умножение ставки на коэффициент)
 */
class Baraban : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief Конструктор игры "Слоты"
     * @param parent Родительский виджет
     */
    explicit Baraban(QWidget *parent = nullptr);
    
    /**
     * @brief Деструктор игры "Слоты"
     */
    ~Baraban();
    
    /**
     * @brief Показать окно игры
     * 
     * Отображает интерфейс игры и подготавливает начальное состояние
     * барабанов и элементов управления
     */
    void slot_show();

    /**
     * @brief Установить символ на первом барабане
     * @param itemId Идентификатор символа (1-6)
     * 
     * Изменяет изображение на первом барабане согласно переданному ID символа
     */
    void set_item1(int itemId);
    
    /**
     * @brief Установить символ на втором барабане
     * @param itemId Идентификатор символа (1-6)
     * 
     * Изменяет изображение на втором барабане согласно переданному ID символа
     */
    void set_item2(int itemId);
    
    /**
     * @brief Установить символ на третьем барабане
     * @param itemId Идентификатор символа (1-6)
     * 
     * Изменяет изображение на третьем барабане согласно переданному ID символа
     */
    void set_item3(int itemId);

private slots:
    /**
     * @brief Обработчик кнопки "Играть"
     * 
     * Запускает игровой процесс:
     * - Проверяет достаточность средств для ставки
     * - Генерирует случайные результаты для барабанов
     * - Запускает анимацию вращения
     * - Вычисляет и начисляет выигрыш
     */
    void on_pushButtonPlay_clicked();

    /**
     * @brief Обработчик кнопки ставки 1000 робуксов
     * 
     * Устанавливает размер ставки в 1000 робуксов
     */
    void on_pushButton1000_clicked();

    /**
     * @brief Обработчик кнопки ставки 500 робуксов
     * 
     * Устанавливает размер ставки в 500 робуксов
     */
    void on_pushButton500_clicked();

    /**
     * @brief Обработчик кнопки ставки 100 робуксов
     * 
     * Устанавливает размер ставки в 100 робуксов
     */
    void on_pushButton100_clicked();

    /**
     * @brief Обработчик кнопки "Назад"
     * 
     * Возвращает игрока в главное меню казино
     */
    void on_BackButton_clicked();

private:
    Ui::Baraban *ui;          ///< Пользовательский интерфейс игры

    ClientApi *clientApi;     ///< API для взаимодействия с сервером

    QPixmap Item1;            ///< Изображение символа на первом барабане
    QPixmap Item2;            ///< Изображение символа на втором барабане
    QPixmap Item3;            ///< Изображение символа на третьем барабане

    int size_of_stavka;       ///< Текущий размер ставки в робуксах

    /**
     * @brief Запустить вращение слотов
     * @param rounds Количество оборотов анимации
     * 
     * Выполняет анимацию вращения барабанов с заданным количеством
     * промежуточных кадров для создания эффекта случайности
     */
    void run_slots(int rounds);

signals:
    /**
     * @brief Сигнал возврата в главное меню
     * @param playerLogin Логин игрока для обновления данных
     * 
     * Испускается при завершении игровой сессии и возврате
     * в основное меню казино
     */
    void to_main(QString playerLogin);

};

#endif // BARABAN_H
