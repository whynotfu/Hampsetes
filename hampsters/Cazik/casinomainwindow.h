/**
 * @file casinomainwindow.h
 * @brief Заголовочный файл главного меню казино
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит объявление класса CasinoMainWindow, который представляет
 * главное меню казино с выбором игр и переходами к различным разделам.
 */

#ifndef CASINOMAINWINDOW_H
#define CASINOMAINWINDOW_H

#include <QMainWindow>
#include <QMessageBox>

namespace Ui {
class CasinoMainWindow;
}

/**
 * @brief Главное окно казино с меню выбора игр
 * 
 * Класс CasinoMainWindow представляет центральное меню приложения казино.
 * Предоставляет пользователю возможность:
 * - Выбирать из доступных мини-игр
 * - Просматривать превью игр с изображениями
 * - Переходить к админ-панели (для администраторов)
 * - Открывать личную страницу пользователя
 * - Просматривать текущий баланс и статистику
 * 
 * Окно служит хабом для навигации по всем разделам приложения.
 */
class CasinoMainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
     * @brief Конструктор главного окна казино
     * @param parent Родительский виджет (по умолчанию nullptr)
     * 
     * Инициализирует интерфейс главного меню и настраивает
     * начальное состояние компонентов.
     */
    explicit CasinoMainWindow(QWidget *parent = nullptr);
    
    /**
     * @brief Деструктор главного окна казино
     * 
     * Освобождает ресурсы, используемые главным меню.
     */
    ~CasinoMainWindow();

private:
    /** @brief Указатель на UI объект главного окна */
    Ui::CasinoMainWindow *ui;

    /** @brief Индекс текущей выбранной мини-игры для циклического переключения */
    int game_slot;

    /** @brief Изображение текущей выбранной игры */
    QPixmap Image;
    
    /** @brief Название текущей выбранной игры */
    QPixmap Name;

public slots:
    /**
     * @brief Слот для показа главного окна
     * 
     * Отображает главное меню казино и обновляет информацию
     * о текущем пользователе и его балансе.
     */
    void slot_show();

    /**
     * @brief Смена отображаемой мини-игры в превью
     * @param direction Направление переключения (true - вперед, false - назад)
     * @param image Изображение игры для отображения
     * @param name Название игры для отображения
     * 
     * Обновляет превью игры в главном меню, показывая
     * изображение и название выбранной игры.
     */
    void change_minigame(bool direction, QPixmap image, QPixmap name);

private slots:
    /**
     * @brief Обработчик кнопки переключения на следующую игру
     * 
     * Циклически переключает отображаемую игру в превью,
     * обновляя изображения и описания.
     */
    void on_NextGameButton_clicked();
    
    /**
     * @brief Обработчик кнопки начала игры
     * 
     * Запускает выбранную в данный момент мини-игру,
     * генерируя соответствующий сигнал для перехода.
     */
    void on_PlayButton_clicked();

    /**
     * @brief Обработчик кнопки перехода к админ-панели
     * 
     * Открывает административную панель для управления
     * системой (доступно только администраторам).
     */
    void on_Admin_page_button_clicked();

    /**
     * @brief Обработчик кнопки личной страницы пользователя
     * 
     * Открывает персональную страницу пользователя со
     * статистикой игр и настройками аккаунта.
     */
    void on_pushButton_clicked();

signals:
    /** @brief Сигнал для перехода к игре в слот-машину */
    void baraban_sig();

    /** @brief Сигнал для перехода к игре в рулетку */
    void ruletka_sig();

    /** @brief Сигнал для перехода к игре-кликеру */
    void clicker_sig();

    /** @brief Сигнал для перехода к игре в кости */
    void kosti_sig();

    /** @brief Сигнал для перехода к игре "больше-меньше" */
    void gtn_sig();

    /** @brief Сигнал для перехода к административной панели */
    void admn_sig();

    /** @brief Сигнал для перехода к пользовательской панели */
    void user_sig();
};

#endif // CASINOMAINWINDOW_H
