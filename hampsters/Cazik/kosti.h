/**
 * @file kosti.h
 * @brief Игра "Кости" - игра в игральные кости
 * @author Development Team
 * @date 2025
 * @version 1.0
 * 
 * Этот файл содержит объявление класса Kosti, который реализует
 * игру в игральные кости. Игра включает в себя бросок двух кубиков,
 * систему ставок и расчет выигрышей на основе суммы выпавших очков.
 */

#ifndef KOSTI_H
#define KOSTI_H

#include <QDialog>
#include <QPixmap>
#include "clientapi.h"

namespace Ui {
class Kosti;
}

/**
 * @brief Игра "Кости" - бросок двух игральных кубиков
 * 
 * Класс Kosti реализует азартную игру с двумя шестигранными кубиками.
 * Игровая механика включает:
 * - Бросок двух кубиков с визуализацией результата
 * - Систему ставок (100, 500, 1000 робуксов)
 * - Расчет выигрышей на основе суммы очков
 * - Анимацию броска кубиков
 * 
 * Правила игры:
 * - Игрок выбирает размер ставки
 * - При нажатии "Играть" бросаются два кубика
 * - Выигрыш зависит от суммы очков: 7 и 11 - джекпот, дубли - повышенная выплата
 * - Обычные комбинации дают стандартную выплату
 */
class Kosti : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief Конструктор игры "Кости"
     * @param parent Родительский виджет
     */
    explicit Kosti(QWidget *parent = nullptr);
    
    /**
     * @brief Деструктор игры "Кости"
     */
    ~Kosti();
    
    /**
     * @brief Показать окно игры
     * 
     * Отображает интерфейс игры и подготавливает начальное состояние
     * кубиков и элементов управления
     */
    void slot_show();
    
    /**
     * @brief Обновить отображение баланса
     * 
     * Запрашивает актуальный баланс с сервера и обновляет
     * его отображение в интерфейсе
     */
    void updateBalance();

private slots:
    /**
     * @brief Обработчик кнопки "Играть"
     * 
     * Запускает игровой процесс:
     * - Проверяет достаточность средств для ставки
     * - Выполняет бросок кубиков
     * - Вычисляет результат и выигрыш
     * - Обновляет баланс игрока
     */
    void on_pushButtonPlay_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 1000 робуксов
     * 
     * Устанавливает размер ставки в 1000 робуксов
     */
    void on_pushButton1000_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 500 робуксов
     * 
     * Устанавливает размер ставки в 500 робуксов
     */
    void on_pushButton500_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 100 робуксов
     * 
     * Устанавливает размер ставки в 100 робуксов
     */
    void on_pushButton100_clicked();
    
    /**
     * @brief Обработчик кнопки "Назад"
     * 
     * Возвращает игрока в главное меню казино
     */
    void on_BackButton_clicked();

private:
    ClientApi *clientApi;     ///< API для взаимодействия с сервером
    Ui::Kosti *ui;           ///< Пользовательский интерфейс игры
    int size_of_stavka;      ///< Текущий размер ставки в робуксах
    
    /**
     * @brief Выполнить бросок кубиков
     * 
     * Генерирует случайные значения для двух кубиков,
     * обновляет их визуальное представление и вычисляет результат
     */
    void rollDice();
    
    /**
     * @brief Обновить изображения кубиков
     * @param dice1 Значение первого кубика (1-6)
     * @param dice2 Значение второго кубика (1-6)
     * 
     * Устанавливает соответствующие изображения кубиков
     * в зависимости от выпавших значений
     */
    void updateDiceImages(int dice1, int dice2);
    
    /**
     * @brief Показать результат броска
     * @param dice1 Значение первого кубика
     * @param dice2 Значение второго кубика
     * 
     * Отображает результат игры, вычисляет выигрыш
     * и показывает соответствующее сообщение игроку
     */
    void showResult(int dice1, int dice2);

signals:
    /**
     * @brief Сигнал возврата в главное меню
     * @param playerLogin Логин игрока для обновления данных
     * 
     * Испускается при завершении игровой сессии и возврате
     * в основное меню казино
     */
    void to_main(QString playerLogin);
};
#endif // KOSTI_H
