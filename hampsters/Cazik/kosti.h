/**
 * @file kosti.h
 * @brief Заголовочный файл игры в кости
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит объявление класса Kosti, который реализует мини-игру
 * в кости с возможностью делать ставки на результат броска.
 */

#ifndef KOSTI_H
#define KOSTI_H

#include <QDialog>
#include <QPixmap>

namespace Ui {
class Kosti;
}

/**
 * @brief Класс игры в кости
 * 
 * Класс Kosti реализует азартную игру в кости, где игрок делает ставку
 * и бросает две игральные кости для получения выигрыша.
 * 
 * Правила игры:
 * - Игрок выбирает размер ставки (100, 500 или 1000 робуксов)
 * - Бросается две игральные кости
 * - Выигрыш зависит от суммы очков на костях:
 *   * Сумма 7 или 11 - выигрыш удваивается
 *   * Дубль (одинаковые числа) - выигрыш утраивается
 *   * Другие комбинации - ставка теряется
 * - Анимация показывает изображения костей с выпавшими значениями
 * 
 * Игра основана на удаче и предлагает хорошие коэффициенты выплат.
 */
class Kosti : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief Конструктор игры в кости
     * @param parent Родительский виджет (по умолчанию nullptr)
     * 
     * Инициализирует интерфейс игры и загружает изображения костей.
     */
    explicit Kosti(QWidget *parent = nullptr);
    
    /**
     * @brief Деструктор игры в кости
     * 
     * Освобождает ресурсы, используемые игрой в кости.
     */
    ~Kosti();
    
    /**
     * @brief Слот для показа окна игры
     * 
     * Отображает интерфейс игры в кости и обновляет
     * информацию о текущем балансе игрока.
     */
    void slot_show();
    
    /**
     * @brief Обновление отображения баланса игрока
     * 
     * Обновляет информацию о текущем количестве робуксов
     * на интерфейсе игры после выигрышей или проигрышей.
     */
    void updateBalance();

private slots:
    /**
     * @brief Обработчик кнопки "Играть"
     * 
     * Запускает процесс броска костей: выполняет анимацию,
     * рассчитывает результат и обновляет баланс игрока
     * в зависимости от выпавшей комбинации.
     */
    void on_pushButtonPlay_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 1000 робуксов
     * 
     * Устанавливает размер ставки в 1000 робуксов.
     * Проверяет достаточность средств на балансе игрока.
     */
    void on_pushButton1000_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 500 робуксов
     * 
     * Устанавливает размер ставки в 500 робуксов.
     * Проверяет достаточность средств на балансе игрока.
     */
    void on_pushButton500_clicked();
    
    /**
     * @brief Обработчик кнопки ставки 100 робуксов
     * 
     * Устанавливает размер ставки в 100 робуксов.
     * Проверяет достаточность средств на балансе игрока.
     */
    void on_pushButton100_clicked();
    
    /**
     * @brief Обработчик кнопки возврата в главное меню
     * 
     * Закрывает окно игры в кости и возвращает игрока
     * в главное меню казино.
     */
    void on_BackButton_clicked();

private:
    /** @brief Указатель на UI объект игры в кости */
    Ui::Kosti *ui;
    
    /** @brief Размер текущей ставки игрока */
    int size_of_stavka;
    
    /** @brief Текущий баланс игрока в робуксах */
    int robuks;
    
    /**
     * @brief Выполнение броска костей
     * 
     * Генерирует случайные значения для двух игральных костей
     * и запускает анимацию отображения результата.
     */
    void rollDice();
    
    /**
     * @brief Обновление изображений костей
     * @param dice1 Значение первой кости (1-6)
     * @param dice2 Значение второй кости (1-6)
     * 
     * Отображает на интерфейсе изображения костей с
     * соответствующими выпавшими значениями.
     */
    void updateDiceImages(int dice1, int dice2);
    
    /**
     * @brief Показ результата игры
     * @param dice1 Значение первой кости
     * @param dice2 Значение второй кости
     * 
     * Рассчитывает выигрыш или проигрыш на основе выпавших значений,
     * обновляет баланс игрока и показывает результат на экране.
     */
    void showResult(int dice1, int dice2);

signals:
    /**
     * @brief Сигнал возврата в главное меню
     * @param username Имя текущего пользователя
     * 
     * Испускается при нажатии кнопки возврата для
     * перехода к главному меню казино с передачей имени пользователя.
     */
    void to_main(QString username);
};
#endif // KOSTI_H
