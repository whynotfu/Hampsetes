/**
 * @file client_functions.h
 * @brief Вспомогательные функции и структуры клиентской части
 * @author Development Team
 * @date 2025
 * @version 1.0
 * 
 * Этот файл содержит объявления вспомогательных функций, глобальных переменных
 * и структур данных, используемых в клиентской части приложения казино "Хампстерс".
 * Включает функции авторизации, игровой логики и управления пользовательскими данными.
 */

#ifndef CLIENT_FUNCTIONS_H
#define CLIENT_FUNCTIONS_H
#include <QString>
#include <QDateTime>

// Глобальные переменные текущего пользователя
extern int robuks;              ///< Баланс текущего авторизованного пользователя в робуксах
extern QString currentUsername; ///< Логин текущего авторизованного пользователя
extern QString currentRole;     ///< Роль пользователя ("user" или "admin")
extern int TotalBets;           ///< Общее количество ставок текущего пользователя
extern int TotalWins;           ///< Общая сумма выигрышей текущего пользователя
extern QString ids;             ///< Идентификатор текущей сессии пользователя

/**
 * @brief Структура данных пользователя казино
 * 
 * Структура User содержит полную информацию о зарегистрированном
 * пользователе системы казино "Хампстерс".
 */
struct User {
    QString login;        ///< Логин пользователя (уникальный идентификатор)
    QString password;     ///< Пароль пользователя (хешированный)
    QString role;         ///< Роль пользователя ("user" - обычный игрок, "admin" - администратор)
    int balance;          ///< Текущий баланс пользователя в робуксах
    int total_bets;       ///< Общее количество сделанных ставок за все время
    int total_wins;       ///< Общая сумма выигрышей за все время
    QDateTime last_login; ///< Время последней авторизации в системе
    bool is_auth;         ///< Флаг текущего состояния авторизации
};

extern QList<User> users; ///< Глобальный список всех пользователей системы

/**
 * @brief Авторизация пользователя в системе
 * @param login Логин пользователя
 * @param password Пароль пользователя
 * @return Код результата авторизации (0 - успех, другие - ошибки)
 * 
 * Выполняет проверку учетных данных пользователя и устанавливает
 * глобальные переменные текущей сессии при успешной авторизации.
 */
int auth(QString login, QString password);

/**
 * @brief Регистрация нового пользователя
 * @param login Логин нового пользователя
 * @param password Пароль нового пользователя
 * @param confirmPassword Подтверждение пароля
 * @return true при успешной регистрации, false при ошибке
 * 
 * Создает новый аккаунт пользователя с начальным балансом
 * и добавляет его в систему.
 */
bool reg(QString login, QString password, QString confirmPassword);

/**
 * @brief Отправка игровых данных на сервер
 * @param gameType Тип игры (идентификатор)
 * @param betAmount Размер ставки
 * @param result Результат игры
 * 
 * Отправляет информацию о проведенной игре на сервер
 * для обновления баланса и статистики игрока.
 */
void toServer(int gameType, int betAmount, int result);

/**
 * @brief Получить путь к ресурсам приложения
 * @return Строка с путем к директории ресурсов
 * 
 * Возвращает корректный путь к изображениям и другим ресурсам
 * приложения в зависимости от платформы.
 */
QString path();

/**
 * @brief Генератор случайных чисел для слотов
 * @return Случайное число для определения символа на барабане
 * 
 * Генерирует случайное число в диапазоне символов игровых автоматов
 * с учетом вероятностей выпадения различных символов.
 */
int slots_rand();

/**
 * @brief Перемешивание массива случайным образом
 * @param array Указатель на массив для перемешивания
 * @param size Размер массива
 * 
 * Использует алгоритм Фишера-Йетса для случайного перемешивания
 * элементов массива. Применяется для рандомизации отображения
 * картинок при проигрышных комбинациях.
 */
void shuffleArray(int* array, int size);

#endif // CLIENT_FUNCTIONS_H
