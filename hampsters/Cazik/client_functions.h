/**
 * @file client_functions.h
 * @brief Заголовочный файл с глобальными функциями и структурами данных
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит основные функции для работы с пользователями, аутентификацией,
 * генерацией случайных чисел и вспомогательные утилиты для игр казино.
 */

#ifndef CLIENT_FUNCTIONS_H
#define CLIENT_FUNCTIONS_H
#include <QString>
#include <QDateTime>

/** @brief Баланс текущего пользователя в robux */
extern int robuks;

/** @brief Логин текущего авторизованного пользователя */
extern QString currentUsername;

/**
 * @brief Структура данных пользователя
 * 
 * Содержит всю необходимую информацию о пользователе системы,
 * включая учетные данные, баланс и статистику игр.
 */
struct User {
    QString login;          ///< Логин пользователя (уникальный идентификатор)
    QString password;       ///< Пароль пользователя (хранится в зашифрованном виде)
    QString role;           ///< Роль пользователя ("user" или "admin")
    int balance;            ///< Текущий баланс пользователя в robux
    int total_bets;         ///< Общее количество сделанных ставок
    int total_wins;         ///< Общая сумма выигрышей за все время
    QDateTime last_login;   ///< Время последней авторизации пользователя
    bool is_auth;           ///< Флаг текущего состояния авторизации
};

/** @brief Глобальный список всех пользователей системы */
extern QList<User> users;

/**
 * @brief Функция аутентификации пользователя
 * @param login Логин пользователя
 * @param password Пароль пользователя
 * @return Результат аутентификации: 0 - успех, 1 - ошибка логина, 2 - ошибка пароля
 * 
 * Проверяет учетные данные пользователя в базе данных или списке пользователей.
 * При успешной аутентификации устанавливает глобальные переменные текущего пользователя.
 */
int auth(QString login, QString password);

/**
 * @brief Функция регистрации нового пользователя
 * @param login Логин нового пользователя
 * @param password Пароль нового пользователя
 * @param role Роль пользователя ("user" или "admin")
 * @return true если регистрация прошла успешно, false если пользователь уже существует
 * 
 * Создает нового пользователя в системе с указанными учетными данными.
 * Проверяет уникальность логина перед созданием.
 */
bool reg(QString login, QString password, QString role);

/**
 * @brief Получение пути к рабочей директории приложения
 * @return Строка с путем к директории приложения
 * 
 * Возвращает путь к директории, где хранятся файлы приложения,
 * включая базу данных и ресурсы.
 */
QString path();

/**
 * @brief Генератор случайных чисел для слот-машины
 * @return Случайное число от 1 до 3 включительно
 * 
 * Специализированная функция генерации случайных чисел для игры в слоты.
 * Использует равномерное распределение для честной игры.
 */
int slots_rand();

/**
 * @brief Перемешивание массива целых чисел
 * @param array Указатель на массив для перемешивания
 * @param size Размер массива
 * 
 * Реализует алгоритм перемешивания Фишера-Йетса для случайного
 * изменения порядка элементов массива. Используется для вывода
 * случайных изображений при проигрыше в играх.
 */
void shuffleArray(int* array, int size);

#endif // CLIENT_FUNCTIONS_H
