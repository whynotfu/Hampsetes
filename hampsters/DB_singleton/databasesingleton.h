/**
 * @file databasesingleton.h
 * @brief Заголовочный файл синглтона базы данных
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит объявления классов DatabaseSingleton и DatabaseSingletonDestroyer
 * для управления единственным экземпляром подключения к базе данных в приложении казино.
 */

#ifndef DATABASESINGLETON_H
#define DATABASESINGLETON_H

#include <QVariant> //для хранения различных типов данных в Qt
#include <QDebug> //для вывода отладочной инф-и в консоль
#include <QSqlDatabase> //для работы с базами данных
#include <QSqlQuery> //классы для выполнения SQL-запросов к базе данных
#include <QSqlError> //классы для обработки ошибок, возникающих при работе с БД
#include <QSqlRecord> //классы для доступа к данным, полученным через SQL-запрос

#define DataBaseName "C:/Users/alina/Downloads/DataBase.db" //путь к используемой БД

class DatabaseSingleton;

/**
 * @brief Класс-деструктор для синглтона базы данных
 * 
 * Класс DatabaseSingletonDestroyer отвечает за корректное удаление
 * экземпляра синглтона при завершении работы приложения.
 * Гарантирует освобождение ресурсов и закрытие соединения с БД.
 * 
 * Реализует паттерн RAII (Resource Acquisition Is Initialization)
 * для автоматического управления ресурсами.
 */
class DatabaseSingletonDestroyer
{
private:
    /** @brief Указатель на экземпляр класса DatabaseSingleton */
    DatabaseSingleton * p_instance;
    
public:
    /**
     * @brief Деструктор класса-уничтожителя
     * 
     * Автоматически вызывается при завершении работы приложения
     * и удаляет экземпляр синглтона, освобождая ресурсы.
     */
    ~DatabaseSingletonDestroyer();
    
    /**
     * @brief Инициализация указателя на синглтон
     * @param p Указатель на экземпляр DatabaseSingleton
     * 
     * Устанавливает указатель на экземпляр синглтона для
     * последующего удаления в деструкторе.
     */
    void initialize(DatabaseSingleton * p);
};

/**
 * @brief Синглтон для управления базой данных казино
 * 
 * Класс DatabaseSingleton реализует паттерн Singleton для обеспечения
 * единственного экземпляра подключения к базе данных в течение всего
 * времени работы приложения.
 * 
 * Функциональность:
 * - Авторизация и регистрация пользователей
 * - Управление балансами игроков
 * - Получение статистики пользователей
 * - Проверка прав доступа (admin/user)
 * - Ведение истории игр и выигрышей
 * 
 * Паттерн Singleton гарантирует:
 * - Единственное подключение к БД
 * - Централизованное управление данными
 * - Эффективное использование ресурсов
 */
class DatabaseSingleton
{
private:
    /** @brief Статический указатель на единственный экземпляр класса */
    static DatabaseSingleton * p_instance;
    
    /** @brief Статический объект-деструктор для автоматической очистки ресурсов */
    static DatabaseSingletonDestroyer destroyer;
    
    /** @brief Объект соединения с базой данных SQLite */
    QSqlDatabase db;
    
    /**
     * @brief Проверка аутентификации пользователя
     * @param userId ID пользователя для проверки
     * @return true если пользователь аутентифицирован, false в противном случае
     * 
     * Проверяет флаг IsAuth в базе данных для указанного пользователя.
     */
    bool isUserAuthenticated(int userId);
    
protected:
    /**
     * @brief Приватный конструктор синглтона
     * 
     * Инициализирует подключение к базе данных SQLite.
     * Приватный доступ предотвращает прямое создание объектов.
     */
    DatabaseSingleton();
    
    /** @brief Запрет копирования объекта синглтона */
    DatabaseSingleton(const DatabaseSingleton&) = delete;
    
    /** @brief Запрет присваивания объектов синглтона */
    DatabaseSingleton& operator = (DatabaseSingleton&) = delete;
    
    /**
     * @brief Деструктор синглтона
     * 
     * Закрывает соединение с базой данных при завершении работы.
     */
    ~DatabaseSingleton();
    
    /** @brief Дружественный класс для доступа к деструктору */
    friend class DatabaseSingletonDestroyer;
    
    /**
     * @brief Вспомогательный метод выполнения SQL-запросов
     * @param query Объект SQL-запроса для выполнения
     * @return Список строк с результатами запроса
     * 
     * Выполняет переданный запрос и преобразует результат
     * в удобный для обработки формат.
     */
    QStringList getquery(QSqlQuery& query);
    
public:
    /**
     * @brief Получение единственного экземпляра синглтона
     * @return Указатель на экземпляр DatabaseSingleton
     * 
     * Единственный способ получить доступ к объекту базы данных.
     * При первом вызове создает экземпляр, в последующих возвращает существующий.
     */
    static DatabaseSingleton* getInstance();
    
    /**
     * @brief Авторизация пользователя в системе
     * @param login Логин пользователя
     * @param password Пароль пользователя
     * @return Строка с результатом авторизации и данными пользователя
     * 
     * Проверяет учетные данные в базе и возвращает информацию о пользователе
     * включая роль и ID при успешной авторизации.
     */
    QString auth(QString login, QString password);
    
    /**
     * @brief Регистрация нового пользователя
     * @param login Логин нового пользователя
     * @param password Пароль нового пользователя
     * @return Строка с результатом регистрации
     * 
     * Создает новый аккаунт пользователя с ролью "user"
     * после проверки уникальности логина.
     */
    QString Registration(const QString& login, const QString& password);
    
    /**
     * @brief Получение личной статистики пользователя
     * @param socket_id ID пользователя
     * @return Строка со статистикой пользователя
     * 
     * Возвращает персональную статистику: логин, баланс, 
     * количество ставок и выигрышей.
     */
    QString MyStats(int socket_id);
    
    /**
     * @brief Проверка прав администратора
     * @param socket_id ID пользователя
     * @return true если пользователь администратор, false в противном случае
     * 
     * Проверяет роль пользователя в базе данных.
     */
    bool isUserAdmin(int socket_id);
    
    /**
     * @brief Получение статистики всех пользователей (только для админов)
     * @param socket_id ID администратора, запрашивающего данные
     * @return Список строк со статистикой всех пользователей
     * 
     * Возвращает полную статистику по всем зарегистрированным пользователям.
     * Доступно только администраторам.
     */
    QList<QString> AllStats(int socket_id);
    
    /**
     * @brief Добавление выигрыша к балансу пользователя
     * @param socket_id ID пользователя
     * @param winAmount Размер выигрыша
     * @return true при успешном обновлении, false при ошибке
     * 
     * Увеличивает баланс пользователя на указанную сумму
     * и обновляет счетчик выигрышей.
     */
    bool addWin(int socket_id, double winAmount);
    
    /**
     * @brief Получение текущего баланса пользователя
     * @param socket_id ID пользователя
     * @return Текущий баланс пользователя или -1 при ошибке
     * 
     * Возвращает актуальный баланс указанного пользователя из базы данных.
     */
    double getBalance(int socket_id);
};



#endif // DATABASESINGLETON_H
