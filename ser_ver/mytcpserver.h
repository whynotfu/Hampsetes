/**
 * @file mytcpserver.h
 * @brief TCP-сервер для казино "Хампстерс"
 * @author Development Team
 * @date 2025
 * @version 1.0
 * 
 * Этот файл содержит объявление класса MyTcpServer, который реализует
 * серверную часть приложения казино "Хампстерс". Сервер обрабатывает
 * подключения клиентов, запросы авторизации, игровые операции и
 * административные функции через TCP-соединения.
 */

#ifndef MYTCPSERVER_H
#define MYTCPSERVER_H
#include <QObject>
#include <QTcpServer>
#include <QTcpSocket>
#include <QtNetwork>
#include <QByteArray>
#include <QDebug>
#include <QVector>
#include "databasesingleton.h"

/**
 * @brief TCP-сервер для обработки клиентских подключений казино
 * 
 * Класс MyTcpServer реализует серверную логику казино "Хампстерс".
 * Основные функции:
 * - Обработка множественных TCP-подключений клиентов
 * - Парсинг и маршрутизация клиентских запросов
 * - Взаимодействие с базой данных через DataBaseSingleton
 * - Управление сессиями пользователей
 * - Обработка игровых операций и административных команд
 * 
 * Сервер поддерживает следующие типы запросов:
 * - AUTH: авторизация пользователей
 * - REG: регистрация новых пользователей
 * - GAME: игровые операции и обновление балансов
 * - ADMIN: административные функции
 * - STATS: получение статистики пользователей
 * 
 * Протокол связи основан на текстовых командах, передаваемых через TCP.
 */
class MyTcpServer : public QObject
{
    Q_OBJECT

public:
    /**
     * @brief Парсинг и обработка клиентских запросов
     * @param request Строка запроса от клиента
     * @return Ответ сервера для отправки клиенту
     * 
     * Центральный метод обработки всех типов запросов от клиентов.
     * Анализирует команду и вызывает соответствующие методы базы данных
     * для выполнения операций.
     */
    QString Parsing(QString request);
    
    /**
     * @brief Конструктор TCP-сервера
     * @param parent Родительский объект Qt
     * 
     * Инициализирует сервер, создает экземпляр базы данных
     * и настраивает прослушивание порта для входящих соединений.
     */
    explicit MyTcpServer(QObject *parent = nullptr);
    
    /**
     * @brief Деструктор TCP-сервера
     * 
     * Закрывает все активные соединения и освобождает ресурсы
     */
    ~MyTcpServer();

public slots:
    /**
     * @brief Обработчик новых подключений клиентов
     * 
     * Вызывается при поступлении нового TCP-подключения.
     * Создает новый сокет для клиента и добавляет его в список активных соединений.
     */
    void slotNewConnection();
    
    /**
     * @brief Обработчик отключения клиентов
     * 
     * Вызывается при разрыве соединения с клиентом.
     * Удаляет сокет из списка активных соединений и очищает связанные данные.
     */
    void slotClientDisconnected();
    
    /**
     * @brief Обработчик входящих данных от клиентов
     * 
     * Вызывается при получении данных от любого из подключенных клиентов.
     * Читает данные, парсит запрос и отправляет ответ обратно клиенту.
     */
    void slotServerRead();

private:
    QByteArray Data;                        ///< Буфер для хранения входящих данных
    QTcpServer * mTcpServer;                ///< Основной TCP-сервер для прослушивания порта
    QVector <QTcpSocket*> Sockets;          ///< Список всех активных клиентских соединений
    DataBaseSingleton *db;                  ///< Экземпляр синглтона базы данных
    QTcpSocket * mTcpSocket;                ///< Текущий обрабатываемый сокет клиента
    QMap<QTcpSocket*, QString> * Socket_Login; ///< Мапинг сокетов на логины авторизованных пользователей
};
#endif // MYTCPSERVER_H
