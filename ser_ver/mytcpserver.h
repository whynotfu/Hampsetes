/**
 * @file mytcpserver.h
 * @brief Заголовочный файл TCP сервера казино
 * @author Команда разработчиков
 * @date 2025
 * @version 1.0
 * 
 * Содержит объявление класса MyTcpServer для обработки сетевых
 * подключений клиентов к серверу казино.
 */

#ifndef MYTCPSERVER_H
#define MYTCPSERVER_H
#include <QObject>
#include <QTcpServer>
#include <QTcpSocket>

#include <QtNetwork>
#include <QByteArray>
#include <QDebug>

/**
 * @brief TCP сервер для приложения казино
 * 
 * Класс MyTcpServer реализует многопользовательский TCP сервер,
 * который обрабатывает подключения клиентов казино и управляет
 * сетевой коммуникацией.
 * 
 * Функциональность:
 * - Прием новых подключений клиентов
 * - Обработка запросов авторизации и регистрации
 * - Управление игровыми сессиями
 * - Синхронизация данных между клиентами
 * - Обработка отключений клиентов
 * 
 * Поддерживает одновременное подключение множества клиентов
 * через векторное хранение сокетов.
 */
class MyTcpServer : public QObject
{
    Q_OBJECT
public:
    /**
     * @brief Конструктор TCP сервера
     * @param parent Родительский объект (по умолчанию nullptr)
     * 
     * Инициализирует сервер, создает слушающий сокет и
     * настраивает обработчики событий подключения.
     */
    explicit MyTcpServer(QObject *parent = nullptr);
    
    /**
     * @brief Деструктор TCP сервера
     * 
     * Корректно завершает работу сервера, закрывает все
     * активные соединения и освобождает ресурсы.
     */
    ~MyTcpServer();

public slots:
    /**
     * @brief Слот обработки новых подключений
     * 
     * Вызывается при поступлении нового подключения от клиента.
     * Создает новый сокет для клиента и добавляет его в список
     * активных соединений.
     */
    void slotNewConnection();
    
    /**
     * @brief Слот обработки отключения клиента
     * 
     * Вызывается при отключении клиента от сервера.
     * Удаляет сокет из списка активных соединений и
     * освобождает связанные ресурсы.
     */
    void slotClientDisconnected();
    
    /**
     * @brief Слот чтения данных от клиента
     * 
     * Обрабатывает входящие сообщения от клиентов:
     * - Запросы авторизации/регистрации
     * - Игровые команды и ставки
     * - Запросы статистики
     * - Административные команды
     */
    void slotServerRead();

private:
    /** @brief Основной TCP сервер для прослушивания подключений */
    QTcpServer * mTcpServer;
    
    /** @brief Вектор активных сокетов клиентов */
    QVector <QTcpSocket*> Sockets;
};
#endif // MYTCPSERVER_H







